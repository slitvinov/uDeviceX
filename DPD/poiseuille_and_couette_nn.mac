/* Poiseuille and Couette flow */
load("dimension") $
alias(di,  dimension) $

/* print info */
who(e):= printf(true, "| ~8a |   ~12a |  ~40a | ~%", e , get(lhs(e), 'di), get(lhs(e), 'de))$
one(e):= printf(true, "| ~a | ~%", e);

/* register units and description of a parameter */
un(e, u, d):= (put(e, u, 'di), put(e, d, 'de)) $

un('Velocity     , 'length/'time           , "velocity units") $
un('Acceleration , di('Velocity)/'time     , "acceleration units") $
un('Force        , di('Acceleration)*'mass , "force units") $
un('Stress       , di('Force)/length^2     , "units of stress") $
un('rho          , 'mass/'length^3         , "mass density") $
un('Lz_c           , 'length                 , "domain size in Z (Couette)") $
un('Lz_p           , 'length                 , "domain size in Z (Poiseuille)") $

un('nu           , 'length^2/'time         , "kinematic viscosity") $
un('mu           , di('nu)*di('rho)        , "dynamic viscosity") $
un('gd_c         , di('Velocity)/'length   , "shear rate (gamma dot, Couette)") $

un('f0           , di('Acceleration)       , "body force (in units of acceleration)") $
un('sigma_xz         , di('Stress)           , "stress component") $
un('sigma_xz_c       , di('Stress)           , "stress component (Couette)") $
un('div_sigma_xz_p   , di('Stress)/length    , "divergence of stress (Poiseuille)") $

un('sigma_xz_c_ud       , di('Force)*length           , "stress component (Couette, uDeviceX)") $
un('div_sigma_xz_p_ud   , di('Force)*length/length    , "divergence of stress (Poiseuille, uDeviceX)") $

un('x            , 'length                 , "coordinate") $
un('y            , 'length                 , "coordinate") $
un('z            , 'length                 , "coordinate") $
un('vmax_c       , di('Velocity)           , "maximum velocity in Couette") $
un('vmax_p       , di('Velocity)           , "maximum velocity in Poiseuille") $
un('Re           , 1                       , "Reynolds number") $

un('V              , 'length^3               , "Volume of system") $
un('Vp             , 'length^3               , "Volume of DPD particle") $
un('numberdensity  , 1/'length^3             , "Number density of DPD particles") $
un('Np             , 1                       , "number of DPD particles") $
un('m              , 'mass                   , "mass of one DPD particle") $

depends('gd, 'z);
depends('vx, 'z);

/* define the only non-zero component of a stress tensor */
sigma_xz: 'mu*'gd^'n;

/* divergence(sigma) = -F */
deq  : diff(sigma_xz, 'z) = - 'f0*'rho;

/* solve for velocity */
declare('n, real);
assume('n>0);
gdsol : ode2(deq, 'gd, 'z);

/* Poiseuille */
gd_p: ic1(gdsol, 'z='Lz_p/2, 'gd=0);

assume('Lz_p > 2*'z);
assume('f0>0, 'mu>0, 'rho>0);
gd_p: solve(gd_p, gd)[1];

veq : subst(gd = diff('vx, 'z), gd_p);
vsol: ode2(veq, 'vx, 'z);
vsol: ic1(vsol, 'z=0, 'vx=0);

e: rhs(factor(subst([f0=1, rho=1, Lz_p=1, mu=1], vsol)));

n0: 7/10;
e0: subst(n=n0, e);
e1: subst([n=n0, z = 1 - z], e);

draw2d( explicit(e0, z, 0, 1/2), explicit(e1, z, 1/2, 1));
